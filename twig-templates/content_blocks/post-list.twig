<link rel="stylesheet" href="{{ widget_css }}" type="text/css" media="all">

<section class='cb full-width' style="background-color: {{ block_bg_color }}">
	<div class='ui container'>
    <div class='inner-container'>
  		<h2 class="{{ title_underline }}" style="text-align: {{ title_alignment }}">{{ title }}</h2>
      <p class="cb_excerpt" style="text-align: {{ excerpt_alignment }}">{{ excerpt }} </p>
      <div id="{{ selector }}" style="margin-top: 2em; text-align: {{ text_alignment }}">LOADING Component...</div>
      
      {% if btn_label is not empty or btn_link is not empty %}
      <div class="cb_button" style="text-align: {{ btn_text_alignment }}">
        <a class="ui animated button" href="{{ btn_link }}" {{ btn_new_win }} style="background-color: {{ btn_bg_color }}" tabindex="0">
          <div class="visible content"  style="color: {{ btn_label_color }}"> {{ btn_label }}</div>
          <div class="hidden content">
            <i style="color:  {{ btn_label_color }}" class="right arrow icon"></i>
          </div>
        </a>
      </div>
      {% endif %}

    </div><!-- inner-container -->
  </div>
</section>

<script type="text/javascript" src="{{ widget_js }}"></script>
<script>

  var selectBy = '{{ cdp_post_select_by }}';
  var indexes = '{{ cdp_indexes }}';

  // if article feed widget see post ids then it will render individual posts 
  // else will fall back to using most recent and a category if sent
  var postIds = ( selectBy === 'recent' ) ? '' : {{ cdp_post_ids|json_encode() }}
  var postsRelated = {{ cdp_posts_related|json_encode() }}
  var postsMeta = {{ cdp_post_meta_fields_to_show|json_encode() }}
  var image = {{ cdp_image|json_encode() }}

  var intervalId;

  function renderArticleFeed() {
    try {
      CDP.widgets.ArticleFeed.new({
        selector: '#{{ selector }}',
        sites: ( indexes ) ? indexes : 'yali.dev.america.gov',  
        size: '{{ cdp_num_posts }}', 
        types: 'post', 
        ids: postIds,
        langs: 'en-US',
        tags: '',
        categories: '{{ cdp_category }}', 
        meta: postsMeta, 
        ui: {
          layout: '{{ cdp_ui_layout }}',
          direction: '{{ cdp_ui_direction }}',
          image: {
            shape: image['image-shape'], 
            width:  image['image-height'],
            borderWidth: image['image-border-width'],             
            borderColor: image['image-border-color'],
            borderStyle: image['image-border-style']
          }
        }
      }).render();
    } catch (e) {
      console.log('Unable to add article feed.')
    }
  }

  function shouldDisplayRelatedLinks() {
    console.log(selectBy)
    if( selectBy === 'custom' ) {
      if( Array.isArray(postIds) && Array.isArray(postsRelated) ) {
        // this is a workaround, better to add an event dispatch from React component
        // essentailly, we need to wait until the articles are attached to the DOM
        // before we can append any supplemental links
        if( postIds.length && postsRelated.length ) {
          intervalId = setInterval( addRelatedLinks, 200 ); 
        }
      }
    }
  }
    
  function addRelatedLinks() {
    var items = document.getElementsByClassName( 'article-item' );
    if( items.length ) {
      clearInterval( intervalId );
      [].forEach.call( items, function(item) {  // Convert HTMLCollection before iterating
        lookUpItem(item);
    });
    }
  }

  function lookUpItem( item ) {
    if( item.dataset.id ) {
      
      postIds.map( (post, index ) => {
        if( post === item.dataset.id ) {
          let related = postsRelated[index];
          if( related )  {
            appendItem( item, related);
          } 
        }
      }); 
    }
  }

  function appendItem( item, related ) {
    var div = document.createElement('div');  
    div.setAttribute( 'class', 'cb_button' )
    var a = document.createElement('a');  
    a.setAttribute( 'href', related.link );
    a.setAttribute( 'class', 'ui button item' ); 
    a.innerText = related.label;
    div.appendChild( a )
    item.appendChild( div );
  }

  if( CDP ) {  
    renderArticleFeed();
    shouldDisplayRelatedLinks();
  }
    
</script> 